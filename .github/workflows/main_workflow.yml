
name: Recipe book workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r backend/requirements.txt
    #- name: Lint with flake8
    #  run: flake8 backend

    #- name: Test with django test
      #run: pytest tests.py 
      # TODO вроверить нобходимость маршрута
    #  run: python backend/foodgram/manage.py test

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/recipe-book-backend:latest

  deploy:
   runs-on: ubuntu-latest
   needs: build_and_push_to_docker_hub
   if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
   steps:
   - name: executing remote ssh commands to deploy
     uses: appleboy/ssh-action@master
     with:
       host: ${{ secrets.HOST }}
       username: ${{ secrets.USER }}
       key: ${{ secrets.SSH_KEY }}
       passphrase: ${{ secrets.PASSPHRASE }} # если ваш ssh-ключ защищен фразой-паролем  
        #source: "docker-compose.yaml, nginx/default.conf"
       #target: "~/app/"
       script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/recipe-book-frontend
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/recipe-book-backend
          sudo docker-compose stop
          sudo docker-compose rm backend
          rm .env
          touch .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo POSTGRES_USER=${{ secrets.DB_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          sudo docker-compose up -d
         #sudo docker pull krytet/flask-first
         #sudo docker stop $(sudo docker ps -a -q)
         #sudo docker run --rm -d -p 5000:5000 krytet/flask-first
  
  send_message:
    name: Send telegram message
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!  
